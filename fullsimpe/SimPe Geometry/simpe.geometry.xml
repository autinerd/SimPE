<?xml version="1.0"?>
<doc>
    <assembly>
        <name>simpe.geometry</name>
    </assembly>
    <members>
        <member name="T:SimPe.Geometry.GeometryException">
            <summary>
            Exception thrown by the Geometry Classes
            </summary>
        </member>
        <member name="M:SimPe.Geometry.GeometryException.#ctor(System.String)">
            <summary>
            Create a new Instance
            </summary>
            <param name="message">The Message that should be displayed</param>
        </member>
        <member name="T:SimPe.Geometry.Matrixd">
            <summary>
            Zusammenfassung f√ºr Matrices.
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.#ctor(System.Int32,System.Int32)">
            <summary>
            Representation of a Matrix
            </summary>
            <param name="col">Number of Columns</param>
            <param name="row">Number of Rows</param>
            <remarks>Minimum is a 1x1 (rowxcol)Matrix</remarks>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.#ctor(SimPe.Geometry.Vector3f)">
            <summary>
            Create a new 3x1 Matrix
            </summary>
            <param name="v">the vecotor that should be represented as a Matrix</param>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.#ctor(SimPe.Geometry.Vector4f)">
            <summary>
            Create a new 4x1 Matrix
            </summary>
            <param name="v">the vecotor that should be represented as a Matrix</param>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.GetVector">
            <summary>
            Returns the Vector stored in this matrix or null if not possible!
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.GetVector4">
            <summary>
            Returns the Vector stored in this matrix or null if not possible!
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.GetTranspose">
            <summary>
            Create the Transpose of this Matrix
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.GetIdentity(System.Int32,System.Int32)">
            <summary>
            Create an identity Mareix
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="P:SimPe.Geometry.Matrixd.Rows">
            <summary>
            Number of stored Rows
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Matrixd.Columns">
            <summary>
            Numbner of stored Columns
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Matrixd.Item(System.Int32,System.Int32)">
            <summary>
            Integer Indexer (row, column)
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Matrixd.Trace">
            <summary>
            Returns the Trace of the Matrix
            </summary>
            <exception cref="T:SimPe.Geometry.GeometryException">Thrown if the matrix is not a square Matrix</exception>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Multiply(SimPe.Geometry.Matrixd,SimPe.Geometry.Matrixd)">
            <summary>
            Matirx Multiplication
            </summary>
            <param name="m1">First Matrix</param>
            <param name="m2">Second Matrix</param>
            <returns>The resulting Matrix</returns>
            <exception cref="T:SimPe.Geometry.GeometryException">Thrown if Number of Rows in m1 is not equal to Number of Columns in m2</exception>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Multiply(SimPe.Geometry.Matrixd,System.Double)">
            <summary>
            Scalar Matirx Multiplication
            </summary>
            <param name="m1">First Matrix</param>
            <param name="d">a Scalar</param>
            <returns>The resulting Matrix</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Multiply(System.Double,SimPe.Geometry.Matrixd)">
            <summary>
            Scalar Matirx Multiplication
            </summary>
            <param name="m1">First Matrix</param>
            <param name="d">a Scalar</param>
            <returns>The resulting Matrix</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Division(SimPe.Geometry.Matrixd,System.Double)">
            <summary>
            Scalar Matirx Multiplication
            </summary>
            <param name="m1">First Matrix</param>
            <param name="d">a Scalar</param>
            <returns>The resulting Matrix</returns>
            <exception cref="T:SimPe.Geometry.GeometryException">Thrown if User did Attempt to divide By Zero</exception>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Division(System.Double,SimPe.Geometry.Matrixd)">
            <summary>
            Scalar Matirx Multiplication
            </summary>
            <param name="m1">First Matrix</param>
            <param name="d">a Scalar</param>
            <returns>The resulting Matrix</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_ExclusiveOr(SimPe.Geometry.Matrixd,System.Single)">
            <summary>
            Calculates the n-th Power
            </summary>
            <param name="m1"></param>
            <param name="val"></param>
            <returns></returns>
            <remarks>Based on code by Rajitha Wimalasooriya (http://www.thecodeproject.com/csharp/rtwmatrix.asp)</remarks>
            <exception cref="T:SimPe.Geometry.GeometryException">Thrown if this is not a Square Matrix</exception>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Addition(SimPe.Geometry.Matrixd,SimPe.Geometry.Matrixd)">
            <summary>
            Adds two matrices
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
            <remarks>Based on code by Rajitha Wimalasooriya (http://www.thecodeproject.com/csharp/rtwmatrix.asp)</remarks>
            <exception cref="T:SimPe.Geometry.GeometryException">Thrown if the MAtrices have diffrent Sizes</exception>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Subtraction(SimPe.Geometry.Matrixd,SimPe.Geometry.Matrixd)">
            <summary>
            Substract two Matrices
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
            <remarks>Based on code by Rajitha Wimalasooriya (http://www.thecodeproject.com/csharp/rtwmatrix.asp)</remarks>		
            <exception cref="T:SimPe.Geometry.GeometryException">Thrown if the MAtrices have diffrent Sizes</exception>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_LogicalNot(SimPe.Geometry.Matrixd)">
            <summary>
            Create the Inverse of a Matrix
            </summary>
            <param name="m1">The Matrix you want to Invert</param>
            <returns>The inverted matrix</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.GetInverse">
            <summary>
            Returns the Inverse of this Quaternion
            </summary>
            <returns>The Inverted Matrix</returns>
            <remarks>Based on code by Rajitha Wimalasooriya (http://www.thecodeproject.com/csharp/rtwmatrix.asp)</remarks>
            <exception cref="T:SimPe.Geometry.GeometryException">Thrown if the Matrix is Singular (<see cref="M:SimPe.Geometry.Matrixd.Determinant"/>==0)</exception>		
        </member>
        <member name="M:SimPe.Geometry.Matrixd.ToString">
            <summary>
            Return a String describing the Matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.GetHashCode">
            <summary>
            Calculate a new HashCode describing the instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.Equals(System.Object)">
            <summary>
            Does the passed Object contain Equal Data?
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Multiply(SimPe.Geometry.Matrixd,SimPe.Geometry.Vector3f)">
            <summary>
            SMatirx Multiplication
            </summary>
            <param name="m1">First Matrix</param>
            <param name="v">Vector</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Multiply(SimPe.Geometry.Matrixd,SimPe.Geometry.Vector4f)">
            <summary>
            SMatirx Multiplication
            </summary>
            <param name="m1">First Matrix</param>
            <param name="v">Vector</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Equality(SimPe.Geometry.Matrixd,SimPe.Geometry.Matrixd)">
            <summary>
            Are tow Matrixces equal
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.op_Inequality(SimPe.Geometry.Matrixd,SimPe.Geometry.Matrixd)">
            <summary>
            Are two Matrices inequal?
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.Determinant">
            <summary>
            Calculate the determinant of a Matrix
            </summary>
            <returns>The determinant</returns>
            <exception cref="T:SimPe.Geometry.GeometryException">Thrown, if the Matrix is not a Square Matrix</exception>
            <remarks>Based on code by Rajitha Wimalasooriya (http://www.thecodeproject.com/csharp/rtwmatrix.asp)</remarks>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.Adjoint">
            <summary>
            Calculate the Adjoint of a Matrix
            </summary>
            <returns>The adjoint</returns>
            <exception cref="T:SimPe.Geometry.GeometryException">Thrown if <see cref="P:SimPe.Geometry.Matrixd.Rows"/> or <see cref="P:SimPe.Geometry.Matrixd.Columns"/> is less than 2.</exception>
            <remarks>Based on code by Rajitha Wimalasooriya (http://www.thecodeproject.com/csharp/rtwmatrix.asp)</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SimPe.Geometry.Matrixd.Minor(System.Int32,System.Int32)" -->
        <member name="P:SimPe.Geometry.Matrixd.Identity">
            <summary>
            Returns true, if this is the identity matrix
            </summary>
            <remarks>Based on code by Rajitha Wimalasooriya (http://www.thecodeproject.com/csharp/rtwmatrix.asp)</remarks>
        </member>
        <member name="P:SimPe.Geometry.Matrixd.Invertable">
            <summary>
            True if this Matrix is invertibale
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Matrixd.Orthogonal">
            <summary>
            True if the Matrix is Orthogonal
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.Translation(SimPe.Geometry.Vector3f)">
            <summary>
            Create  Translation Matrixd
            </summary>
            <param name="v">The Translation Vector</param>
            <returns>a new Translation Matrixd</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Create a Translation Matrixd
            </summary>
            <param name="x">Translation to x</param>
            <param name="y">Translation to y</param>
            <param name="z">Translation to z</param>
            <returns>a new Translation Matrixd</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.Scale(System.Double)">
            <summary>
            Create a UniformScale Matrixd
            </summary>
            <param name="x">Scales</param>
            <returns>a new Translation Matrixd</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Create a Scale Matrixd
            </summary>
            <param name="x">Scale in x</param>
            <param name="y">Scale in y</param>
            <param name="z">Scale in z</param>
            <returns>a new Translation Matrixd</returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.RotateYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="yaw">Y-Component of a Rotation Vector</param>
            <param name="pitch">X-Component of a Rotation Vector</param>
            <param name="roll">Z-Component of a Rotation Vector</param>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.RotateX(System.Double)">
            <summary>
            Rotation round the X-Axis
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.RotateY(System.Double)">
            <summary>
            Rotation round the X-Axis
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Matrixd.RotateZ(System.Double)">
            <summary>
            Rotation round the X-Axis
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="T:SimPe.Geometry.QuaternionParameterType">
            <summary>
            Determins the type of the passed Arguments
            </summary>	
        </member>
        <member name="F:SimPe.Geometry.QuaternionParameterType.UnitAxisAngle">
            <summary>
            Arguments represent a (unit-)Axis/Angle Pair
            </summary>
        </member>
        <member name="F:SimPe.Geometry.QuaternionParameterType.ImaginaryReal">
            <summary>
            Arguments represent the Imaginary koeef. of a Quaternion and the Real Part
            </summary>
        </member>
        <member name="T:SimPe.Geometry.Quaternion">
            <summary>
            Zusammenfassung f√ºr Quaternion.
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.#ctor(SimPe.Geometry.QuaternionParameterType,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates new Quaternion i*x + j*y + k*z + w (Based an an coefficients/unit-Axis/Angle)
            </summary>
            <param name="p">How do you want to create the Quaternion</param>
            <param name="x">X-Imaginary Part/X-Axis</param>
            <param name="y">Y-Imaginary Part/Y-Axis</param>
            <param name="z">Z-Imaginary Part/Z-Axis</param>
            <param name="w">RealPart/Angle</param>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.#ctor(SimPe.Geometry.QuaternionParameterType,SimPe.Geometry.Vector3f,System.Double)">
            <summary>
            Creates new Quaternion i*x + j*y + k*z + w (Based an an coefficients/unit-Axis/Angle)
            </summary>
            <param name="p">How do you want to create the Quaternion</param>
            <param name="v">The (unit) Axis for the Rotation/Imaginary part</param>
            <param name="a">The angle (in Radiants)/Real Part</param>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.#ctor">
            <summary>
            Creates a new Identity Quaternion
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Quaternion.Norm">
            <summary>
            Returns the Norm of the Quaternion
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Quaternion.Length">
            <summary>
            Returns the Length of the Quaternion
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Quaternion.Conjugate">
            <summary>
            Returns the Conjugate for this Quaternion
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.op_LogicalNot(SimPe.Geometry.Quaternion)">
            <summary>
            Create the Inverse of a Quaternion
            </summary>
            <param name="q">The Quaternion you want to Invert</param>
            <returns>The inverted Quaternion</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.GetInverse">
            <summary>
            Returns the Inverse of this Quaternion
            </summary>
            <returns>Inverted Quaternion</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.op_Multiply(SimPe.Geometry.Quaternion,SimPe.Geometry.Quaternion)">
            <summary>
            Multiplication
            </summary>
            <param name="q1">First Quaternion</param>
            <param name="q2">Second Quaternion</param>
            <returns>The resulting Quaternion</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.op_BitwiseAnd(SimPe.Geometry.Quaternion,SimPe.Geometry.Quaternion)">
            <summary>
            Scalar, dot or inner Product
            </summary>
            <param name="q1">First Quaternion</param>
            <param name="q2">Second Quaternion</param>
            <returns>The resulting Quaternion</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.op_BitwiseOr(SimPe.Geometry.Quaternion,SimPe.Geometry.Quaternion)">
            <summary>
            Cross Product
            </summary>
            <param name="q1">First Quaternion</param>
            <param name="q2">Second Quaternion</param>
            <returns>The resulting Quaternion</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.op_Multiply(SimPe.Geometry.Quaternion,System.Double)">
            <summary>
            Multiplication
            </summary>
            <param name="q1">First Quaternion</param>
            <param name="d">a Scalar Value</param>
            <returns>The resulting Quaternion</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.op_Multiply(System.Double,SimPe.Geometry.Quaternion)">
            <summary>
            Multiplication
            </summary>
            <param name="q1">First Quaternion</param>
            <param name="d">a Scalar Value</param>
            <returns>The resulting Quaternion</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.op_Addition(SimPe.Geometry.Quaternion,SimPe.Geometry.Quaternion)">
            <summary>
            Addition
            </summary>
            <param name="q1">First Quaternion</param>
            <param name="q2">Second Quaternion</param>
            <returns>The resulting Quaternion</returns>
        </member>
        <member name="P:SimPe.Geometry.Quaternion.Imaginary">
            <summary>
            Returns the Imaginary Part of the Quaternion
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Quaternion.Identity">
            <summary>
            Returns an Identity Quaternion
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Quaternion.Zero">
            <summary>
            Returns an Empty Quaternion
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.RadToDeg(System.Double)">
            <summary>
            Returns an Angle in Degree
            </summary>
            <param name="rad">Angle in Radiants</param>
            <returns>Angle in Degree</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.DegToRad(System.Double)">
            <summary>
            Returns an Angle in Radiants
            </summary>
            <param name="deg">Angle in Degree</param>
            <returns>Angle in Radiants</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.MakeUnitQuaternion">
            <summary>
            Makes sure this Quaternion is a Unit Quaternion (Length=1)
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Quaternion.Angle">
            <summary>
            Returns the Rotation Angle (in Radiants)
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Quaternion.Axis">
            <summary>
            Returns the rotation (unit-)Axis
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.SetFromAxisAngle(SimPe.Geometry.Vector3f,System.Double)">
            <summary>
            Set the Quaternion based on an Axis-Angle pair
            </summary>
            <param name="axis">The (unit-)Axis</param>
            <param name="a">The rotation Angle</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SimPe.Geometry.Quaternion.GetEulerAnglesYXZ" -->
        <!-- Badly formed XML comment ignored for member "M:SimPe.Geometry.Quaternion.GetEulerAnglesZXY" -->
        <!-- Badly formed XML comment ignored for member "M:SimPe.Geometry.Quaternion.GetEulerAnglesZYX" -->
        <member name="M:SimPe.Geometry.Quaternion.FromEulerAngles(SimPe.Geometry.Vector3f)">
            <summary>
            Set the quaternion based on the passed Euler Angles
            </summary>
            <param name="ea">The Euler Angles</param>
            <remarks>
            X=Pitch
            Y=Yaw
            Z=Roll
            </remarks>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.FromEulerAngles(System.Double,System.Double,System.Double)">
            <summary>
            Set the quaternion based on the passed Euler Angles
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.NormalizeRad(System.Double)">
            <summary>
            Makes sure that the passed Radius has only one Pi cycle. Result is in Intervall [-Pi; +PI]
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.Rotate(SimPe.Geometry.Vector3f)">
            <summary>
            Rotate the passed Vector by this Quaternion
            </summary>
            <param name="v">Vector you want to rotate</param>
            <returns>rotated Vector</returns>
            <remarks>Make sure the Quaternion is normalized before you rotate a Vector!</remarks>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.Clone">
            <summary>
            Create a clone of this Quaternion
            </summary>
            <returns></returns>
        </member>
        <member name="P:SimPe.Geometry.Quaternion.Matrix">
            <summary>
            Returns the Matirx for this Quaternion. 		
            </summary>
            <remarks>
            Before the Matrix is generated, the Quaternion will get Normalized!!!
            </remarks>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.Unserialize(System.IO.BinaryReader)">
            <summary>
            Unserializes a BinaryStream into the Attributes of this Instance
            </summary>
            <param name="reader">The Stream that contains the FileData</param>
        </member>
        <member name="M:SimPe.Geometry.Quaternion.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes a the Attributes stored in this Instance to the BinaryStream
            </summary>
            <param name="writer">The Stream the Data should be stored to</param>
            <remarks>
            Be sure that the Position of the stream is Proper on 
            return (i.e. must point to the first Byte after your actual File)
            </remarks>
        </member>
        <member name="T:SimPe.Geometry.Quaternions">
            <summary>
            Typesave ArrayList for Quaternion Objects
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Quaternions.Item(System.Int32)">
            <summary>
            Integer Indexer
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Quaternions.Item(System.UInt32)">
            <summary>
            unsigned Integer Indexer
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Quaternions.Add(SimPe.Geometry.Quaternion)">
            <summary>
            add a new Element
            </summary>
            <param name="item">The object you want to add</param>
            <returns>The index it was added on</returns>
        </member>
        <member name="M:SimPe.Geometry.Quaternions.Insert(System.Int32,SimPe.Geometry.Quaternion)">
            <summary>
            insert a new Element
            </summary>
            <param name="index">The Index where the Element should be stored</param>
            <param name="item">The object that should be inserted</param>
        </member>
        <member name="M:SimPe.Geometry.Quaternions.Remove(SimPe.Geometry.Quaternion)">
            <summary>
            remove an Element
            </summary>
            <param name="item">The object that should be removed</param>
        </member>
        <member name="M:SimPe.Geometry.Quaternions.Contains(SimPe.Geometry.Quaternion)">
            <summary>
            Checks wether or not the object is already stored in the List
            </summary>
            <param name="item">The Object you are looking for</param>
            <returns>true, if it was found</returns>
        </member>
        <member name="P:SimPe.Geometry.Quaternions.Length">
            <summary>
            Number of stored Elements
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Quaternions.Clone">
            <summary>
            Create a clone of this Object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:SimPe.Geometry.Vector2f">
            <summary>
            Contains the a 2D Vector (when (un)serialized, it will be interpreted as SingleFloat!)
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vector2f.X">
            <summary>
            The X Coordinate of teh Vector
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vector2f.Y">
            <summary>
            The Y Coordinate of teh Vector
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector2f.#ctor">
            <summary>
            Creates a new Vector Instance (0-Vector)
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector2f.#ctor(System.Double,System.Double)">
            <summary>
            Creates new Vector Instance
            </summary>
            <param name="x">X-Coordinate</param>
            <param name="y">Y-Coordinate</param>
        </member>
        <member name="M:SimPe.Geometry.Vector2f.Unserialize(System.IO.BinaryReader)">
            <summary>
            Unserializes a BinaryStream into the Attributes of this Instance
            </summary>
            <param name="reader">The Stream that contains the FileData</param>
        </member>
        <member name="M:SimPe.Geometry.Vector2f.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes a the Attributes stored in this Instance to the BinaryStream
            </summary>
            <param name="writer">The Stream the Data should be stored to</param>
            <remarks>
            Be sure that the Position of the stream is Proper on 
            return (i.e. must point to the first Byte after your actual File)
            </remarks>
        </member>
        <member name="M:SimPe.Geometry.Vector2f.ToString">
            <summary>
            This output is used in the ListBox View
            </summary>
            <returns>A String Describing the Data</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector2f.Clone">
            <summary>
            Create a clone of this Vector
            </summary>
            <returns></returns>
        </member>
        <member name="T:SimPe.Geometry.Vector3f">
            <summary>
            Contains the a 3D Vector (when (un)serialized, it will be interpreted as SingleFloat!)
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vector3f.Z">
            <summary>
            The Z Coordinate of teh Vector
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.#ctor">
            <summary>
            Creates a new Vector Instance (0-Vector)
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates new Vector Instance
            </summary>
            <param name="x">X-Coordinate</param>
            <param name="y">Y-Coordinate</param>
            <param name="z">Z-Coordinate</param>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.Unserialize(System.IO.BinaryReader)">
            <summary>
            Unserializes a BinaryStream into the Attributes of this Instance
            </summary>
            <param name="reader">The Stream that contains the FileData</param>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes a the Attributes stored in this Instance to the BinaryStream
            </summary>
            <param name="writer">The Stream the Data should be stored to</param>
            <remarks>
            Be sure that the Position of the stream is Proper on 
            return (i.e. must point to the first Byte after your actual File)
            </remarks>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.ToString">
            <summary>
            This output is used in the ListBox View
            </summary>
            <returns>A String Describing the Data</returns>
        </member>
        <member name="P:SimPe.Geometry.Vector3f.UnitVector">
            <summary>
            Returns the UnitVector for this Vector
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.MakeUnitVector">
            <summary>
            Makes sure this Vector is a Unit Vector (Length=1)
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vector3f.Norm">
            <summary>
            Returns the Norm of the Vector
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vector3f.Length">
            <summary>
            Returns the Length of the Vector
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.GetInverse">
            <summary>
            Create the Inverse of a Vector
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_LogicalNot(SimPe.Geometry.Vector3f)">
            <summary>
            Create the Inverse of a Vector
            </summary>
            <param name="v">The Vector you want to Invert</param>
            <returns>The inverted Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_Addition(SimPe.Geometry.Vector3f,SimPe.Geometry.Vector3f)">
            <summary>
            Vector addition
            </summary>
            <param name="v1">First Vector</param>
            <param name="v2">Second Vector</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_Subtraction(SimPe.Geometry.Vector3f,SimPe.Geometry.Vector3f)">
            <summary>
            Vector substraction
            </summary>
            <param name="v1">First Vector</param>
            <param name="v2">Second Vector</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_Multiply(SimPe.Geometry.Vector3f,SimPe.Geometry.Vector3f)">
            <summary>
            Scalar Product
            </summary>
            <param name="v1">First Vector</param>
            <param name="v2">Second Vector</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_BitwiseAnd(SimPe.Geometry.Vector3f,SimPe.Geometry.Vector3f)">
            <summary>
            Scalar Product
            </summary>
            <param name="v1">First Vector</param>
            <param name="v2">Second Vector</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_Multiply(SimPe.Geometry.Vector3f,System.Double)">
            <summary>
            Scalar Multiplication
            </summary>
            <param name="v1">First Vector</param>
            <param name="d">Scalar Factor</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_Multiply(System.Double,SimPe.Geometry.Vector3f)">
            <summary>
            Scalar Multiplication
            </summary>
            <param name="v1">First Vector</param>
            <param name="d">Scalar Factor</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_Division(SimPe.Geometry.Vector3f,System.Double)">
            <summary>
            Scalar Division
            </summary>
            <param name="v1">First Vector</param>
            <param name="d">Scalar Factor</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_Division(System.Double,SimPe.Geometry.Vector3f)">
            <summary>
            Scalar Division
            </summary>
            <param name="v1">First Vector</param>
            <param name="d">Scalar Factor</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_BitwiseOr(SimPe.Geometry.Vector3f,SimPe.Geometry.Vector3f)">
            <summary>
            Cross Product
            </summary>
            <param name="v1">First Vector</param>
            <param name="v2">Second Vector</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_Equality(SimPe.Geometry.Vector3f,SimPe.Geometry.Vector3f)">
            <summary>
            Compare
            </summary>
            <param name="v1">First Vector</param>
            <param name="v2">Second Vector</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.GetHashCode">
            <summary>
            Returns a HashCode to identify this Instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.Equals(System.Object)">
            <summary>
            Returns true if the passed Objects equals this one
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.op_Inequality(SimPe.Geometry.Vector3f,SimPe.Geometry.Vector3f)">
            <summary>
            Compare
            </summary>
            <param name="v1">First Vector</param>
            <param name="v2">Second Vector</param>
            <returns>The resulting Vector</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.GetComponent(System.Int32)">
            <summary>
            Returns a Component of this Vector (0=x, 1=y, 2=z)
            </summary>
            <param name="index">Index of the component</param>
            <returns>the value stored in that Component</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.SetComponent(System.Int32,System.Double)">
            <summary>
            Set a Component of this Vector (0=x, 1=y, 2=z)
            </summary>
            <param name="index">Index of the component</param>
            <param name="val">The new Value</param>
        </member>
        <member name="P:SimPe.Geometry.Vector3f.Item(System.Int32)">
            <summary>
            Integer Indexer
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector3f.Clone">
            <summary>
            Create a clone of this Vector
            </summary>
            <returns></returns>
        </member>
        <member name="T:SimPe.Geometry.Vector3i">
            <summary>
            Contains the a 3D Vector
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vector3i.X">
            <summary>
            The X Coordinate of the Vector
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vector3i.Y">
            <summary>
            The Y Coordinate of the Vector
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vector3i.Z">
            <summary>
            The Z Coordinate of the Vector
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector3i.#ctor">
            <summary>
            Creates a new Vector Instance (0-Vector)
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new Vector Instance
            </summary>
            <param name="x">X-Coordinate</param>
            <param name="y">Y-Coordinate</param>
            <param name="z">Z-Coordinate</param>
        </member>
        <member name="M:SimPe.Geometry.Vector3i.Unserialize(System.IO.BinaryReader)">
            <summary>
            Unserializes a BinaryStream into the Attributes of this Instance
            </summary>
            <param name="reader">The Stream that contains the FileData</param>
        </member>
        <member name="M:SimPe.Geometry.Vector3i.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes a the Attributes stored in this Instance to the BinaryStream
            </summary>
            <param name="writer">The Stream the Data should be stored to</param>
            <remarks>
            Be sure that the Position of the stream is Proper on 
            return (i.e. must point to the first Byte after your actual File)
            </remarks>
        </member>
        <member name="M:SimPe.Geometry.Vector3i.ToString">
            <summary>
            This output is used in the ListBox View
            </summary>
            <returns>A String Describing the Data</returns>
        </member>
        <member name="T:SimPe.Geometry.Vector4f">
            <summary>
            Contains the a 4D Vector (when (un)serialized, it will be interpreted as SingleFloat!)
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vector4f.W">
            <summary>
            The 4th Component of an Vector (often used as focal Point)
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector4f.#ctor">
            <summary>
            Creates a new Vector Instance (0-Vector)
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vector4f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates new Vector Instance
            </summary>
            <param name="x">X-Coordinate</param>
            <param name="y">Y-Coordinate</param>
            <param name="z">Z-Coordinate</param>
        </member>
        <member name="M:SimPe.Geometry.Vector4f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates new Vector Instance
            </summary>
            <param name="x">X-Coordinate</param>
            <param name="y">Y-Coordinate</param>
            <param name="z">Z-Coordinate</param>
            <param name="w">4th-Coordinate (often the focal Point)</param>
        </member>
        <member name="M:SimPe.Geometry.Vector4f.Unserialize(System.IO.BinaryReader)">
            <summary>
            Unserializes a BinaryStream into the Attributes of this Instance
            </summary>
            <param name="reader">The Stream that contains the FileData</param>
        </member>
        <member name="M:SimPe.Geometry.Vector4f.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes a the Attributes stored in this Instance to the BinaryStream
            </summary>
            <param name="writer">The Stream the Data should be stored to</param>
            <remarks>
            Be sure that the Position of the stream is Proper on 
            return (i.e. must point to the first Byte after your actual File)
            </remarks>
        </member>
        <member name="M:SimPe.Geometry.Vector4f.ToString">
            <summary>
            This output is used in the ListBox View
            </summary>
            <returns>A String Describing the Data</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector4f.GetComponent(System.Int32)">
            <summary>
            Returns a Component of this Vector (0=x, 1=y, 2=z, 3=w)
            </summary>
            <param name="index">Index of the component</param>
            <returns>the value stored in that Component</returns>
        </member>
        <member name="M:SimPe.Geometry.Vector4f.SetComponent(System.Int32,System.Double)">
            <summary>
            Set a Component of this Vector (0=x, 1=y, 2=z, 3=w)
            </summary>
            <param name="index">Index of the component</param>
            <param name="val">The new Value</param>
        </member>
        <member name="M:SimPe.Geometry.Vector4f.Clone">
            <summary>
            Create a clone of this Vector
            </summary>
            <returns></returns>
        </member>
        <member name="T:SimPe.Geometry.Vectors3i">
            <summary>
            Typesave ArrayList for Vector3i Objects
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vectors3i.Item(System.Int32)">
            <summary>
            Integer Indexer
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vectors3i.Item(System.UInt32)">
            <summary>
            unsigned Integer Indexer
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vectors3i.Add(SimPe.Geometry.Vector3i)">
            <summary>
            add a new Element
            </summary>
            <param name="item">The object you want to add</param>
            <returns>The index it was added on</returns>
        </member>
        <member name="M:SimPe.Geometry.Vectors3i.Insert(System.Int32,SimPe.Geometry.Vector3i)">
            <summary>
            insert a new Element
            </summary>
            <param name="index">The Index where the Element should be stored</param>
            <param name="item">The object that should be inserted</param>
        </member>
        <member name="M:SimPe.Geometry.Vectors3i.Remove(SimPe.Geometry.Vector3i)">
            <summary>
            remove an Element
            </summary>
            <param name="item">The object that should be removed</param>
        </member>
        <member name="M:SimPe.Geometry.Vectors3i.Contains(SimPe.Geometry.Vector3i)">
            <summary>
            Checks wether or not the object is already stored in the List
            </summary>
            <param name="item">The Object you are looking for</param>
            <returns>true, if it was found</returns>
        </member>
        <member name="P:SimPe.Geometry.Vectors3i.Length">
            <summary>
            Number of stored Elements
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vectors3i.Clone">
            <summary>
            Create a clone of this Object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:SimPe.Geometry.Vectors3f">
            <summary>
            Typesave ArrayList for Vector3f Objects
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vectors3f.Item(System.Int32)">
            <summary>
            Integer Indexer
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vectors3f.Item(System.UInt32)">
            <summary>
            unsigned Integer Indexer
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vectors3f.Add(SimPe.Geometry.Vector3f)">
            <summary>
            add a new Element
            </summary>
            <param name="item">The object you want to add</param>
            <returns>The index it was added on</returns>
        </member>
        <member name="M:SimPe.Geometry.Vectors3f.Insert(System.Int32,SimPe.Geometry.Vector3f)">
            <summary>
            insert a new Element
            </summary>
            <param name="index">The Index where the Element should be stored</param>
            <param name="item">The object that should be inserted</param>
        </member>
        <member name="M:SimPe.Geometry.Vectors3f.Remove(SimPe.Geometry.Vector3f)">
            <summary>
            remove an Element
            </summary>
            <param name="item">The object that should be removed</param>
        </member>
        <member name="M:SimPe.Geometry.Vectors3f.Contains(SimPe.Geometry.Vector3f)">
            <summary>
            Checks wether or not the object is already stored in the List
            </summary>
            <param name="item">The Object you are looking for</param>
            <returns>true, if it was found</returns>
        </member>
        <member name="P:SimPe.Geometry.Vectors3f.Length">
            <summary>
            Number of stored Elements
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vectors3f.Clone">
            <summary>
            Create a clone of this Object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:SimPe.Geometry.Vectors2f">
            <summary>
            Typesave ArrayList for Vector2f Objects
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vectors2f.Item(System.Int32)">
            <summary>
            Integer Indexer
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vectors2f.Item(System.UInt32)">
            <summary>
            unsigned Integer Indexer
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vectors2f.Add(SimPe.Geometry.Vector2f)">
            <summary>
            add a new Element
            </summary>
            <param name="item">The object you want to add</param>
            <returns>The index it was added on</returns>
        </member>
        <member name="M:SimPe.Geometry.Vectors2f.Insert(System.Int32,SimPe.Geometry.Vector2f)">
            <summary>
            insert a new Element
            </summary>
            <param name="index">The Index where the Element should be stored</param>
            <param name="item">The object that should be inserted</param>
        </member>
        <member name="M:SimPe.Geometry.Vectors2f.Remove(SimPe.Geometry.Vector2f)">
            <summary>
            remove an Element
            </summary>
            <param name="item">The object that should be removed</param>
        </member>
        <member name="M:SimPe.Geometry.Vectors2f.Contains(SimPe.Geometry.Vector2f)">
            <summary>
            Checks wether or not the object is already stored in the List
            </summary>
            <param name="item">The Object you are looking for</param>
            <returns>true, if it was found</returns>
        </member>
        <member name="P:SimPe.Geometry.Vectors2f.Length">
            <summary>
            Number of stored Elements
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vectors2f.Clone">
            <summary>
            Create a clone of this Object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:SimPe.Geometry.Vectors4f">
            <summary>
            Typesave ArrayList for Vector4f Objects
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vectors4f.Item(System.Int32)">
            <summary>
            Integer Indexer
            </summary>
        </member>
        <member name="P:SimPe.Geometry.Vectors4f.Item(System.UInt32)">
            <summary>
            unsigned Integer Indexer
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vectors4f.Add(SimPe.Geometry.Vector4f)">
            <summary>
            add a new Element
            </summary>
            <param name="item">The object you want to add</param>
            <returns>The index it was added on</returns>
        </member>
        <member name="M:SimPe.Geometry.Vectors4f.Insert(System.Int32,SimPe.Geometry.Vector4f)">
            <summary>
            insert a new Element
            </summary>
            <param name="index">The Index where the Element should be stored</param>
            <param name="item">The object that should be inserted</param>
        </member>
        <member name="M:SimPe.Geometry.Vectors4f.Remove(SimPe.Geometry.Vector4f)">
            <summary>
            remove an Element
            </summary>
            <param name="item">The object that should be removed</param>
        </member>
        <member name="M:SimPe.Geometry.Vectors4f.Contains(SimPe.Geometry.Vector4f)">
            <summary>
            Checks wether or not the object is already stored in the List
            </summary>
            <param name="item">The Object you are looking for</param>
            <returns>true, if it was found</returns>
        </member>
        <member name="P:SimPe.Geometry.Vectors4f.Length">
            <summary>
            Number of stored Elements
            </summary>
        </member>
        <member name="M:SimPe.Geometry.Vectors4f.Clone">
            <summary>
            Create a clone of this Object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:SimPe.Geometry.VectorTransformation">
            <summary>
            One basic Vector Transformation
            </summary>
        </member>
        <member name="T:SimPe.Geometry.VectorTransformation.TransformOrder">
            <summary>
            What Order should the Transformation be applied
            </summary>
        </member>
        <member name="F:SimPe.Geometry.VectorTransformation.TransformOrder.RotateTranslate">
            <summary>
            Rotate then Translate
            </summary>
        </member>
        <member name="F:SimPe.Geometry.VectorTransformation.TransformOrder.TranslateRotate">
            <summary>
            Translate then Rotate (rigid Body)
            </summary>
        </member>
        <member name="P:SimPe.Geometry.VectorTransformation.Order">
            <summary>
            Returns / Sets the current Order
            </summary>
        </member>
        <member name="P:SimPe.Geometry.VectorTransformation.Translation">
            <summary>
            The Translation
            </summary>
        </member>
        <member name="P:SimPe.Geometry.VectorTransformation.Rotation">
            <summary>
            The Rotation
            </summary>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformation.#ctor(SimPe.Geometry.VectorTransformation.TransformOrder)">
            <summary>
            Create a new Instance
            </summary>
            <param name="o">The order of the Transform</param>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformation.#ctor">
            <summary>
            Create a new Instance
            </summary>
            <remarks>Order is implicit set to <see cref="F:SimPe.Geometry.VectorTransformation.TransformOrder.TranslateRotate"/></remarks>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformation.Unserialize(System.IO.BinaryReader)">
            <summary>
            Unserializes a BinaryStream into the Attributes of this Instance
            </summary>
            <param name="reader">The Stream that contains the FileData</param>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformation.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes a the Attributes stored in this Instance to the BinaryStream
            </summary>
            <param name="writer">The Stream the Data should be stored to</param>
            <remarks>
            Be sure that the Position of the stream is Proper on 
            return (i.e. must point to the first Byte after your actual File)
            </remarks>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformation.Transform(SimPe.Geometry.Vector3f)">
            <summary>
            Applies the Transformation to the passed Vertex
            </summary>
            <param name="v">The Vertex you want to Transform</param>
            <returns>Transformed Vertex</returns>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformation.Clone">
            <summary>
            Create a Clone of this Transformation Set
            </summary>
            <returns></returns>
        </member>
        <member name="T:SimPe.Geometry.VectorTransformations">
            <summary>
            Typesave ArrayList for VectorTransformation Objects
            </summary>
        </member>
        <member name="P:SimPe.Geometry.VectorTransformations.Item(System.Int32)">
            <summary>
            Integer Indexer
            </summary>
        </member>
        <member name="P:SimPe.Geometry.VectorTransformations.Item(System.UInt32)">
            <summary>
            unsigned Integer Indexer
            </summary>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformations.Add(SimPe.Geometry.VectorTransformation)">
            <summary>
            add a new Element
            </summary>
            <param name="item">The object you want to add</param>
            <returns>The index it was added on</returns>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformations.Insert(System.Int32,SimPe.Geometry.VectorTransformation)">
            <summary>
            insert a new Element
            </summary>
            <param name="index">The Index where the Element should be stored</param>
            <param name="item">The object that should be inserted</param>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformations.Remove(SimPe.Geometry.VectorTransformation)">
            <summary>
            remove an Element
            </summary>
            <param name="item">The object that should be removed</param>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformations.Contains(SimPe.Geometry.VectorTransformation)">
            <summary>
            Checks wether or not the object is already stored in the List
            </summary>
            <param name="item">The Object you are looking for</param>
            <returns>true, if it was found</returns>
        </member>
        <member name="P:SimPe.Geometry.VectorTransformations.Length">
            <summary>
            Number of stored Elements
            </summary>
        </member>
        <member name="M:SimPe.Geometry.VectorTransformations.Clone">
            <summary>
            Create a clone of this Object
            </summary>
            <returns>The clone</returns>
        </member>
    </members>
</doc>
